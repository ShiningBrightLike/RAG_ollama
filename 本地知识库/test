1.深度交叉网络DCN手撕
"""
import tensorflow as tf

class CrossNet(tf.keras.layers.Layer):
    """优化版交叉网络（参数效率+维度安全）"""
    def __init__(self, layer_num=3):
        super().__init__()
        self.layer_num = layer_num
        self.kernels = None  # 对角矩阵参数化

    def build(self, input_shape):
        # 参数复杂度从O(d)降至O(1)
        self.kernels = [
            self.add_weight(f'kernel_{i}', shape=(1,),
                           initializer='glorot_normal')
            for i in range(self.layer_num)
        ]
        self.biases = [
            self.add_weight(f'bias_{i}', shape=(input_shape[-1],),
                           initializer='zeros')
            for i in range(self.layer_num)
        ]

    def call(self, x0):
        x = x0
        for i in range(self.layer_num):
            # 使用逐元素乘避免维度问题
            w_term = self.kernels[i] * x  # 广播乘法
            cross_term = tf.multiply(x0, w_term) + self.biases[i]
            x = cross_term + x  # 残差连接
        return x

class DCN(tf.keras.Model):
    """支持混合特征输入的增强版DCN"""
    def __init__(self, num_numeric=2, embed_sizes=None):
        super().__init__()
        # 混合特征处理分支
        self.numeric_dense = Dense(8) if num_numeric >0 else None
        self.embeddings = [
            Embedding(size, dim) for size, dim in embed_sizes
        ] if embed_sizes else []
        
        # 双塔结构
        self.cross_net = CrossNet(layer_num=4)  # 4层交叉（5阶特征组合）
        self.dnn = Dense(64, activation='relu')
        
        # 动态融合层
        self.fusion_gate = Dense(64, activation='sigmoid')  # 门控融合

    def call(self, inputs):
        # 分离处理数值型/类别型特征
        numeric_part = self.numeric_dense(inputs['numerics'])
        embed_part = [emb(inputs[f'cat_{i}']) for i, emb in enumerate(self.embeddings)]
        
        # 拼接所有特征
        combined = tf.concat([numeric_part]+embed_part, axis=1)
        
        # 并行网络
        cross_out = self.cross_net(combined)
        dnn_out = self.dnn(combined)
        
        # 门控融合
        gate = self.fusion_gate(combined)
        fused = gate * cross_out + (1-gate) * dnn_out
        
        return Dense(1, activation='sigmoid')(fused)

"""

